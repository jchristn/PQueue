<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PQueue</name>
    </assembly>
    <members>
        <member name="T:PQueue.PersistentQueue">
            <summary>
            Persistent queue.  Queued entries are backed on disk.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.Depth">
            <summary>
            Number of entries waiting in the queue.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.Length">
            <summary>
            Number of bytes waiting in the queue.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.DataQueued">
            <summary>
            Event handler for when data is queued.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.DataDequeued">
            <summary>
            Event handler for when data is dequeued.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.DataDeleted">
            <summary>
            Event handler for when data is deleted.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.DataExpired">
            <summary>
            Event handler for when data is expired.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.ExceptionEncountered">
            <summary>
            Event handler for when an exception is raised.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.QueueCleared">
            <summary>
            Event handler for when the queue is cleared.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.ExpiryFile">
            <summary>
            Name of the expiration file.  This file will live in the same directory as queued objects.
            </summary>
        </member>
        <member name="P:PQueue.PersistentQueue.ExpirationIntervalMs">
            <summary>
            The number of milliseconds in between checks for expired files.
            </summary>
        </member>
        <member name="M:PQueue.PersistentQueue.#ctor(System.String,System.Boolean)">
            <summary>
            Instantiate.
            </summary>
            <param name="directory">Directory.</param>
            <param name="clearOnDispose">Clear the queue's contents on dispose.  This will delete queued data.</param>
        </member>
        <member name="M:PQueue.PersistentQueue.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="M:PQueue.PersistentQueue.Enqueue(System.String,System.Nullable{System.DateTime})">
            <summary>
            Add data to the queue.
            </summary>
            <param name="data">Data.</param>
            <param name="expiration">Timestamp at which the data should be expired from the queue.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:PQueue.PersistentQueue.Enqueue(System.Byte[],System.Nullable{System.DateTime})">
            <summary>
            Add data to the queue.
            </summary>
            <param name="data">Data.</param>
            <param name="expiration">Timestamp at which the data should be expired from the queue.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:PQueue.PersistentQueue.EnqueueAsync(System.String,System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Add data to the queue asynchronously.
            </summary>
            <param name="data">Data.</param>
            <param name="expiration">Timestamp at which the data should be expired from the queue.</param>
            <param name="token">Cancellation token.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:PQueue.PersistentQueue.EnqueueAsync(System.Byte[],System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Add data to the queue asynchronously.
            </summary>
            <param name="data">Data.</param>
            <param name="expiration">Timestamp at which the data should be expired from the queue.</param>
            <param name="token">Cancellation token.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:PQueue.PersistentQueue.Dequeue(System.String,System.Boolean)">
            <summary>
            Retrieve data from the queue.
            </summary>
            <param name="key">Key, if a specific key is needed.</param>
            <param name="purge">Boolean flag indicating whether or not the entry should be removed from the queue once read.</param>
            <returns>Data.</returns>
        </member>
        <member name="M:PQueue.PersistentQueue.DequeueAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieve data from the queue asynchronously.
            </summary>
            <param name="key">Key, if a specific key is needed.</param>
            <param name="purge">Boolean flag indicating whether or not the entry should be removed from the queue once read.</param>
            <param name="token">Cancellation token.</param>
            <returns>Data.</returns>
        </member>
        <member name="M:PQueue.PersistentQueue.Purge(System.String)">
            <summary>
            Remove a specific entry from the queue.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:PQueue.PersistentQueue.Expire(System.String)">
            <summary>
            Remove a specific entry due to expiration.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:PQueue.PersistentQueue.GetExpiration(System.String)">
            <summary>
            Retrieve the expiration timestamp for a given key.
            </summary>
            <param name="key">Key.</param>
            <returns>Nullable DateTime.</returns>
        </member>
        <member name="M:PQueue.PersistentQueue.Clear">
            <summary>
            Destructively empty the queue.  This will delete all of the files in the directory.
            </summary>
        </member>
        <member name="T:PQueue.QueueManager">
            <summary>
            Queue manager.
            </summary>
        </member>
        <member name="M:PQueue.QueueManager.#ctor">
            <summary>
            Instantiate.
            </summary>
        </member>
        <member name="M:PQueue.QueueManager.Add(System.String,PQueue.PersistentQueue)">
            <summary>
            Add a queue using the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="queue">Queue.</param>
        </member>
        <member name="M:PQueue.QueueManager.TryAdd(System.String,PQueue.PersistentQueue)">
            <summary>
            Add a queue using the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="queue">Queue.</param>
            <returns>Boolean indicating success.</returns>
        </member>
        <member name="M:PQueue.QueueManager.Remove(System.String)">
            <summary>
            Remove a queue using the specified key.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:PQueue.QueueManager.TryRemove(System.String)">
            <summary>
            Remove a queue using the specified key.
            </summary>
            <param name="key">Key.</param>
            <returns>Boolean indicating success.</returns>
        </member>
        <member name="M:PQueue.QueueManager.Exists(System.String)">
            <summary>
            Check if a queue exists by key.
            </summary>
            <param name="key">Key.</param>
            <returns>Boolean indicating existence.</returns>
        </member>
        <member name="M:PQueue.QueueManager.Get(System.String)">
            <summary>
            Retrieve a queue by key.
            </summary>
            <param name="key">Key.</param>
            <returns>Queue.</returns>
        </member>
        <member name="M:PQueue.QueueManager.TryGet(System.String,PQueue.PersistentQueue@)">
            <summary>
            Retrieve a queue by key.
            </summary>
            <param name="key">Key.</param>
            <param name="queue">Queue.</param>
            <returns>Boolean indicating success.</returns>
        </member>
    </members>
</doc>
